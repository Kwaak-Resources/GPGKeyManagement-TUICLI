name: Continuous Integration

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  check:
    name: Check
    runs-on: ubuntu-18.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            --no-install-recommends \
            --allow-unauthenticated libgpgme-dev \
            libxcb-shape0-dev libxcb-xfixes0-dev
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
      - name: Checkout the repository
        uses: actions/checkout@master
      - name: Check the project files
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --verbose

  test:
    name: Test suite
    runs-on: ubuntu-18.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            --no-install-recommends \
            --allow-unauthenticated \
            libgpgme-dev libxcb-shape0-dev libxcb-xfixes0-dev
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: Checkout the repository
        uses: actions/checkout@master
      - name: Prepare the test environment
        run: |
          test_dir="$HOME/.cache/gpg-tui/"
          mkdir -p $test_dir
          export GNUPGHOME=$test_dir
          echo $(openssl rand -base64 8) | gpg \
            --pinentry-mode loopback \
            --no-tty --passphrase-fd 0 \
            --quick-gen-key 'Test User <test@example.org>'
          curl "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1bc755d9fbd24068" | \
            gpg --import
      - name: Run tests
        run: |
          export CARGO_INCREMENTAL=0
          export RUSTFLAGS="-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort"
          export RUSTDOCFLAGS="-Cpanic=abort"
          curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-linux-x86_64.tar.bz2 | tar jxf -
          cargo test --verbose --features gpg-tests $CARGO_OPTIONS
          zip -0 ccov.zip `find . \( -name "gpg_tui*.gc*" \) -print`;
          ./grcov ccov.zip -s . -t lcov --llvm --branch --ignore-not-existing --ignore "/*" -o lcov.info;
          bash <(curl -s https://codecov.io/bash) -f lcov.info;

  clippy:
    name: Lints
    runs-on: ubuntu-18.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            --no-install-recommends \
            --allow-unauthenticated libgpgme-dev \
            libxcb-shape0-dev libxcb-xfixes0-dev
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: clippy
          override: true
      - name: Checkout the repository
        uses: actions/checkout@master
      - name: Check the lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --verbose -- -D warnings

  rustfmt:
    name: Formatting
    runs-on: ubuntu-18.04
    steps:
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          components: rustfmt
          override: true
      - name: Checkout the repository
        uses: actions/checkout@master
      - name: Check the formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check --verbose

  lychee:
    name: Links
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout the repository
        uses: actions/checkout@master
      - name: Check the links
        uses: lycheeverse/lychee-action@v1
        with:
          args: --exclude "patreon.com|aur.archlinux.org/(.+?).git|mailto:+|%7Buser%7D" -v *.md
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
